//server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/employeeDB', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

const employeeSchema = new mongoose.Schema({
    name: String,
    position: String,
    department: String,
    salary: Number
});

const Employee = mongoose.model('Employee', employeeSchema);

// CRUD Routes
// Create
app.post('/employees', async (req, res) => {
    try {
        const employee = new Employee(req.body);
        await employee.save();
        res.status(201).send(employee);
    } catch (error) {
        res.status(400).send(error);
    }
});

// Read all
app.get('/employees', async (req, res) => {
    try {
        const employees = await Employee.find();
        res.send(employees);
    } catch (error) {
        res.status(500).send(error);
    }
});

// Read one
app.get('/employees/:id', async (req, res) => {
    try {
        const employee = await Employee.findById(req.params.id);
        if (!employee) {
            return res.status(404).send();
        }
        res.send(employee);
    } catch (error) {
        res.status(500).send(error);
    }
});

// Update
app.put('/employees/:id', async (req, res) => {
    try {
        const employee = await Employee.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!employee) {
            return res.status(404).send();
        }
        res.send(employee);
    } catch (error) {
        res.status(400).send(error);
    }
});

// Delete
app.delete('/employees/:id', async (req, res) => {
    try {
        const employee = await Employee.findByIdAndDelete(req.params.id);
        if (!employee) {
            return res.status(404).send();
        }
        res.send(employee);
    } catch (error) {
        res.status(500).send(error);
    }
});

// Start server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
//index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Management</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        form { margin: 20px 0; padding: 20px; border: 1px solid #ddd; }
        input, button { margin: 5px 0; padding: 8px; }
        button { cursor: pointer; }
    </style>
</head>
<body>
    <h1>Employee Management</h1>
    
    <form id="employeeForm">
        <input type="hidden" id="employeeId">
        <div>
            <label for="name">Name:</label>
            <input type="text" id="name" required>
        </div>
        <div>
            <label for="position">Position:</label>
            <input type="text" id="position" required>
        </div>
        <div>
            <label for="department">Department:</label>
            <input type="text" id="department" required>
        </div>
        <div>
            <label for="salary">Salary:</label>
            <input type="number" id="salary" required>
        </div>
        <button type="submit">Save</button>
        <button type="button" onclick="clearForm()">Clear</button>
    </form>
    
    <table id="employeeTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Department</th>
                <th>Salary</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    
    <script>
        // Fetch all employees
        async function fetchEmployees() {
            const response = await fetch('http://localhost:3000/employees');
            const employees = await response.json();
            const tbody = document.querySelector('#employeeTable tbody');
            tbody.innerHTML = '';
            
            employees.forEach(employee => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${employee.name}</td>
                    <td>${employee.position}</td>
                    <td>${employee.department}</td>
                    <td>${employee.salary}</td>
                    <td>
                        <button onclick="editEmployee('${employee._id}')">Edit</button>
                        <button onclick="deleteEmployee('${employee._id}')">Delete</button>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        }
        
        // Handle form submission
        document.getElementById('employeeForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const employee = {
                name: document.getElementById('name').value,
                position: document.getElementById('position').value,
                department: document.getElementById('department').value,
                salary: parseFloat(document.getElementById('salary').value)
            };
            
            const id = document.getElementById('employeeId').value;
            let response;
            
            if (id) {
                // Update existing employee
                response = await fetch(`http://localhost:3000/employees/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(employee)
                });
            } else {
                // Create new employee
                response = await fetch('http://localhost:3000/employees', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(employee)
                });
            }
            
            if (response.ok) {
                clearForm();
                fetchEmployees();
            }
        });
        
        // Edit employee
        async function editEmployee(id) {
            const response = await fetch(`http://localhost:3000/employees/${id}`);
            const employee = await response.json();
            
            document.getElementById('employeeId').value = employee._id;
            document.getElementById('name').value = employee.name;
            document.getElementById('position').value = employee.position;
            document.getElementById('department').value = employee.department;
            document.getElementById('salary').value = employee.salary;
        }
        
        // Delete employee
        async function deleteEmployee(id) {
            if (confirm('Are you sure you want to delete this employee?')) {
                await fetch(`http://localhost:3000/employees/${id}`, { method: 'DELETE' });
                fetchEmployees();
            }
        }
        
        // Clear form
        function clearForm() {
            document.getElementById('employeeForm').reset();
            document.getElementById('employeeId').value = '';
        }
        
        // Initial load
        fetchEmployees();
    </script>
</body>
</html>
