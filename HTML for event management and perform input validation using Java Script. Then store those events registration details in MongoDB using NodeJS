//public/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Management</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        h1 {
            color: #333;
            text-align: center;
        }
        form {
            background: #f9f9f9;
            padding: 20px;
            border-radius: 8px;
        }
        label {
            display: block;
            margin-top: 10px;
            font-weight: bold;
        }
        input, select, textarea {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            background: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 15px;
            width: 100%;
        }
        button:hover {
            background: #45a049;
        }
        .error {
            color: red;
            font-size: 14px;
            margin-top: 5px;
        }
        #successMessage {
            color: green;
            text-align: center;
            margin-top: 20px;
            display: none;
        }
    </style>
</head>
<body>
    <h1>Event Registration</h1>
    
    <form id="eventForm">
        <label for="name">Full Name:</label>
        <input type="text" id="name" name="name">
        <div id="nameError" class="error"></div>
        
        <label for="email">Email:</label>
        <input type="email" id="email" name="email">
        <div id="emailError" class="error"></div>
        
        <label for="phone">Phone Number:</label>
        <input type="tel" id="phone" name="phone">
        <div id="phoneError" class="error"></div>
        
        <label for="event">Select Event:</label>
        <select id="event" name="event">
            <option value="">-- Select an Event --</option>
            <option value="conference">Tech Conference</option>
            <option value="workshop">Web Development Workshop</option>
            <option value="seminar">Digital Marketing Seminar</option>
        </select>
        <div id="eventError" class="error"></div>
        
        <label for="comments">Additional Comments:</label>
        <textarea id="comments" name="comments" rows="4"></textarea>
        
        <button type="submit">Register</button>
    </form>
    
    <div id="successMessage">
        <h2>Registration Successful!</h2>
        <p>Thank you for registering. We'll contact you soon.</p>
    </div>

    <script>
        document.getElementById('eventForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Reset errors
            document.querySelectorAll('.error').forEach(el => el.textContent = '');
            
            // Get form values
            const name = document.getElementById('name').value.trim();
            const email = document.getElementById('email').value.trim();
            const phone = document.getElementById('phone').value.trim();
            const event = document.getElementById('event').value;
            
            // Validate inputs
            let isValid = true;
            
            if (name === '') {
                document.getElementById('nameError').textContent = 'Name is required';
                isValid = false;
            }
            
            if (email === '') {
                document.getElementById('emailError').textContent = 'Email is required';
                isValid = false;
            } else if (!/^\S+@\S+\.\S+$/.test(email)) {
                document.getElementById('emailError').textContent = 'Invalid email format';
                isValid = false;
            }
            
            if (phone === '') {
                document.getElementById('phoneError').textContent = 'Phone is required';
                isValid = false;
            } else if (!/^\d{10}$/.test(phone)) {
                document.getElementById('phoneError').textContent = 'Phone must be 10 digits';
                isValid = false;
            }
            
            if (event === '') {
                document.getElementById('eventError').textContent = 'Please select an event';
                isValid = false;
            }
            
            if (isValid) {
                const formData = {
                    name,
                    email,
                    phone,
                    event,
                    comments: document.getElementById('comments').value.trim(),
                    registrationDate: new Date().toISOString()
                };
                
                // Send data to server
                fetch('http://localhost:3000/api/registrations', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Success:', data);
                    document.getElementById('eventForm').reset();
                    document.getElementById('eventForm').style.display = 'none';
                    document.getElementById('successMessage').style.display = 'block';
                })
                .catch((error) => {
                    console.error('Error:', error);
                    alert('Registration failed. Please try again.');
                });
            }
        });
    </script>
</body>
</html>
//server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const app = express();

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/eventManagement', {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));

// Event Registration Schema
const registrationSchema = new mongoose.Schema({
    name: String,
    email: String,
    phone: String,
    event: String,
    comments: String,
    registrationDate: String
});

const Registration = mongoose.model('Registration', registrationSchema);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public')); // Serve static files

// API Routes
app.post('/api/registrations', async (req, res) => {
    try {
        const registration = new Registration(req.body);
        await registration.save();
        res.status(201).json(registration);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

// Get all registrations (for admin view)
app.get('/api/registrations', async (req, res) => {
    try {
        const registrations = await Registration.find();
        res.json(registrations);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Start server
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
