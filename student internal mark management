<!DOCTYPE html>
<html>
<head>
    <title>Student Mark Management</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1>Student Internal Mark Management</h1>

    <!-- Form for Adding/Updating Student Marks -->
    <h2>Add/Update Student Marks</h2>
    <form id="markForm">
        <label>Roll Number:</label>
        <input type="text" id="rollNumber" required><br><br>
        <label>Name:</label>
        <input type="text" id="name" required><br><br>
        <label>Subject 1 Marks:</label>
        <input type="number" id="subject1" required><br><br>
        <label>Subject 2 Marks:</label>
        <input type="number" id="subject2" required><br><br>
        <label>Subject 3 Marks:</label>
        <input type="number" id="subject3" required><br><br>
        <button type="button" onclick="addOrUpdateStudent()">Submit</button>
    </form>

    <!-- Form for Deleting Student -->
    <h2>Delete Student</h2>
    <form id="deleteForm">
        <label>Roll Number:</label>
        <input type="text" id="deleteRollNumber" required><br><br>
        <button type="button" onclick="deleteStudent()">Delete</button>
    </form>

    <!-- Display Students -->
    <h2>Student Records</h2>
    <table border="1">
        <thead>
            <tr>
                <th>Roll Number</th>
                <th>Name</th>
                <th>Subject 1</th>
                <th>Subject 2</th>
                <th>Subject 3</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="studentTableBody"></tbody>
    </table>

    <script>
        // Input validation for marks
        function validateMarks(subject1, subject2, subject3) {
            if (subject1 > 100 || subject1 < 0) {
                alert("Subject 1 marks must be between 0 and 100");
                return false;
            }
            if (subject2 > 100 || subject2 < 0) {
                alert("Subject 2 marks must be between 0 and 100");
                return false;
            }
            if (subject3 > 100 || subject3 < 0) {
                alert("Subject 3 marks must be between 0 and 100");
                return false;
            }
            return true;
        }

        // Fetch and display all students
        async function fetchStudents() {
            try {
                const response = await axios.get('http://localhost:3000/students');
                const students = response.data;
                const tableBody = document.getElementById('studentTableBody');
                tableBody.innerHTML = '';
                students.forEach(student => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${student.rollNumber}</td>
                        <td>${student.name}</td>
                        <td>${student.subject1}</td>
                        <td>${student.subject2}</td>
                        <td>${student.subject3}</td>
                        <td>
                            <button onclick="editStudent('${student.rollNumber}')">Edit</button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                alert('Error fetching students: ' + error.message);
            }
        }

        // Add or Update student
        async function addOrUpdateStudent() {
            const rollNumber = document.getElementById('rollNumber').value;
            const name = document.getElementById('name').value;
            const subject1 = parseInt(document.getElementById('subject1').value);
            const subject2 = parseInt(document.getElementById('subject2').value);
            const subject3 = parseInt(document.getElementById('subject3').value);

            if (!rollNumber || !name) {
                alert('Roll Number and Name are required');
                return;
            }

            if (!validateMarks(subject1, subject2, subject3)) {
                return;
            }

            const student = { rollNumber, name, subject1, subject2, subject3 };

            try {
                await axios.post('http://localhost:3000/students', student);
                alert('Student saved successfully');
                document.getElementById('markForm').reset();
                fetchStudents();
            } catch (error) {
                alert('Error saving student: ' + error.message);
            }
        }

        // Edit student
        async function editStudent(rollNumber) {
            try {
                const response = await axios.get(`http://localhost:3000/students/${rollNumber}`);
                const student = response.data;
                document.getElementById('rollNumber').value = student.rollNumber;
                document.getElementById('name').value = student.name;
                document.getElementById('subject1').value = student.subject1;
                document.getElementById('subject2').value = student.subject2;
                document.getElementById('subject3').value = student.subject3;
            } catch (error) {
                alert('Error fetching student: ' + error.message);
            }
        }

        // Delete student
        async function deleteStudent() {
            const rollNumber = document.getElementById('deleteRollNumber').value;
            if (!rollNumber) {
                alert('Roll Number is required');
                return;
            }

            try {
                await axios.delete(`http://localhost:3000/students/${rollNumber}`);
                alert('Student deleted successfully');
                document.getElementById('deleteForm').reset();
                fetchStudents();
            } catch (error) {
                alert('Error deleting student: ' + error.message);
            }
        }

        // Initial fetch of students
        fetchStudents();
    </script>
</body>
</html>

server.js

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const app = express();
const port = 3000;

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect('mongodb://localhost:27017/student_marks', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('Connected to MongoDB');
}).catch(err => {
    console.error('MongoDB connection error:', err);
});

// Student Schema
const studentSchema = new mongoose.Schema({
    rollNumber: { type: String, required: true, unique: true },
    name: { type: String, required: true },
    subject1: { type: Number, required: true },
    subject2: { type: Number, required: true },
    subject3: { type: Number, required: true }
});

const Student = mongoose.model('Student', studentSchema);

// CRUD Routes
// Get all students
app.get('/students', async (req, res) => {
    try {
        const students = await Student.find();
        res.json(students);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Get student by roll number
app.get('/students/:rollNumber', async (req, res) => {
    try {
        const student = await Student.findOne({ rollNumber: req.params.rollNumber });
        if (!student) {
            return res.status(404).json({ error: 'Student not found' });
        }
        res.json(student);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Create or Update student
app.post('/students', async (req, res) => {
    try {
        const { rollNumber, name, subject1, subject2, subject3 } = req.body;
        const student = await Student.findOneAndUpdate(
            { rollNumber },
            { name, subject1, subject2, subject3 },
            { new: true, upsert: true }
        );
        res.json(student);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Delete student
app.delete('/students/:rollNumber', async (req, res) => {
    try {
        const student = await Student.findOneAndDelete({ rollNumber: req.params.rollNumber });
        if (!student) {
            return res.status(404).json({ error: 'Student not found' });
        }
        res.json({ message: 'Student deleted' });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Start server
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
